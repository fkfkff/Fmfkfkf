import requests
import time
import json
from datetime import datetime, timedelta

TOKEN = "8378183612:AAH9ieJczLQ4rgbSvc38PGn8ML39S2DvbGU"
ADMIN_ID = 8378183612
BASE_URL = f"https://api.telegram.org/bot{TOKEN}"

users = {}
shared_codes = [("BDTDW4", "–ï–≤–≥–µ–Ω–∏–π –ö–ª–æ—á–∫–æ–≤", "@Evgeniy_Klochkov")]  # –ø—Ä–∏–º–µ—Ä
daily_limit = 10
maintenance_mode = False

def api(method, payload):
    """–£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API"""
    url = f"{BASE_URL}/{method}"
    return requests.post(url, json=payload).json()

def send_message(chat_id, text, reply_markup=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if reply_markup is not None:
        # Telegram –æ–∂–∏–¥–∞–µ—Ç reply_markup –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
        payload["reply_markup"] = json.dumps(reply_markup, ensure_ascii=False)
    api("sendMessage", payload)

def answer_callback(callback_id, text=None):
    payload = {"callback_query_id": callback_id}
    if text:
        payload["text"] = text
        payload["show_alert"] = False
    api("answerCallbackQuery", payload)

def get_updates(offset=None, timeout=30):
    params = {"timeout": timeout}
    if offset:
        params["offset"] = offset
    return requests.get(f"{BASE_URL}/getUpdates", params=params).json()

def build_inline(rows):
    # rows: list of lists of (text, callback_data)
    kb = {"inline_keyboard": [[{"text": t, "callback_data": d} for (t, d) in row] for row in rows]}
    return kb

def build_keyboard(rows):
    kb = {"keyboard": [[{"text": t} for t in row] for row in rows], "resize_keyboard": True}
    return kb

def get_user(uid):
    if uid not in users:
        users[uid] = {"codes_received": 0, "shared": 0, "last_reset": datetime.now(), "pending_code": None, "waiting_for_code": False}
    user = users[uid]
    if datetime.now() - user["last_reset"] > timedelta(days=1):
        user["codes_received"] = 0
        user["last_reset"] = datetime.now()
    return user

def handle_message(msg):
    global maintenance_mode
    chat = msg["chat"]
    chat_id = chat["id"]
    text = msg.get("text", "")
    from_user = msg.get("from", {})
    user = get_user(chat_id)

    # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
    if maintenance_mode and chat_id != ADMIN_ID:
        send_message(chat_id, "üöß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã.")
        return

    if text == "/start":
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_keyboard([["üíé –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"], ["üîÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º"], ["üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]]))
        return

    if text == "üíé –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥":
        if user["codes_received"] >= daily_limit:
            send_message(chat_id, "‚ö†Ô∏è –õ–∏–º–∏—Ç 10 –∫–æ–¥–æ–≤ –≤ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
            return
        if not shared_codes:
            send_message(chat_id, "‚è≥ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –∫–æ–≥–æ-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.")
            return

        # –≤—ã–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        code_data = shared_codes.pop(0)
        user["pending_code"] = code_data
        user["codes_received"] += 1

        send_message(
            chat_id,
            "–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –∏–º –ø–æ–¥–µ–ª–∏–ª—Å—è —Å —Ç–æ–±–æ–π.\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Ç–æ–º –ø–æ–¥–µ–ª–∏—Å—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º ‚Äî —Ç–∞–∫ —Ç—ã –ø–æ–º–æ–∂–µ—à—å –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. –ü–æ–¥–µ–ª–∏—à—å—Å—è?ü•π",
            reply_markup=build_inline([[("–î–∞", "yes_share"), ("–ù–µ—Ç", "no_share")]])
        )
        return

    if text == "üîÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º":
        user["waiting_for_code"] = True
        send_message(chat_id, "üì® –í–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (—Ç–æ–ª—å–∫–æ —Å–∞–º –∫–æ–¥):")
        return

    if text == "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        top = sorted(users.items(), key=lambda x: x[1]["shared"], reverse=True)[:20]
        if not top:
            send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø—É.")
            return
        msg = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∏—Å–ª—É –ø–æ–¥–µ–ª–∏–≤—à–∏—Ö—Å—è –∫–æ–¥–æ–≤:\n\n"
        for i, (uid, data) in enumerate(top, start=1):
            msg += f"{i}. <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚Äî {data['shared']} –∫–æ–¥–æ–≤\n"
        send_message(chat_id, msg)
        return

    if user.get("waiting_for_code"):
        code = text.strip().upper()
        shared_codes.append((code, from_user.get("first_name", "User"), f"@{from_user.get('username','no')}"))
        user["waiting_for_code"] = False
        user["shared"] += 1
        send_message(chat_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–æ–¥ {code} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥—Ä—É–≥–∏–º.")
        return

    # –ö–Ω–æ–ø–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –∫–æ–¥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
    if text == "‚úÖ –°–ø–∞—Å–∏–±–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç!":
        user["pending_code"] = None
        send_message(chat_id, "üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return

    if text == "‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω":
        code_data = user.get("pending_code")
        if code_data:
            # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—â—ë –æ—Å—Ç–∞–ª—Å—è) –∏ –æ—á–∏—â–∞–µ–º pending
            shared_codes[:] = [c for c in shared_codes if c != code_data]
            user["pending_code"] = None
            send_message(chat_id, "üö´ –ö–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω.")
        else:
            send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏.")
        return

    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
    if chat_id == ADMIN_ID and text == "/admin":
        send_message(chat_id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=build_keyboard([
            ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì¶ –û—á–µ—Ä–µ–¥—å –∫–æ–¥–æ–≤"],
            ["üßπ –í–∞–π–ø –¥–∞–Ω–Ω—ã—Ö", "üöß –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]))
        return

    if chat_id == ADMIN_ID and text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        msg = "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for uid, d in users.items():
            msg += f"‚Ä¢ <a href='tg://user?id={uid}'>User {uid}</a> ‚Äî shared: {d['shared']}, got today: {d['codes_received']}\n"
        send_message(chat_id, msg or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if chat_id == ADMIN_ID and text == "üì¶ –û—á–µ—Ä–µ–¥—å –∫–æ–¥–æ–≤":
        msg = "üì¶ –û—á–µ—Ä–µ–¥—å –∫–æ–¥–æ–≤:\n\n" + "\n".join([f"{i+1}. {c[0]} ‚Äî {c[1]} ({c[2]})" for i, c in enumerate(shared_codes)]) if shared_codes else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
        send_message(chat_id, msg)
        return

    if chat_id == ADMIN_ID and text == "üßπ –í–∞–π–ø –¥–∞–Ω–Ω—ã—Ö":
        shared_codes.clear()
        users.clear()
        send_message(chat_id, "‚ö†Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
        return

    if chat_id == ADMIN_ID and text == "üöß –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã":
        maintenance_mode = not maintenance_mode
        send_message(chat_id, f"üö® –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if maintenance_mode else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    # (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ä–µ–∞–∫—Ü–∏—é)
    # send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.")

def handle_callback(cb):
    """
    cb ‚Äî callback_query object –∏–∑ Telegram.
    –í–∞–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å answerCallbackQuery, –∏–Ω–∞—á–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∫—Ä—É—Ç–∏–ª–∫–∞.
    """
    cid = cb["id"]
    data = cb["data"]
    from_user = cb["from"]
    chat_id = cb["message"]["chat"]["id"]
    user = get_user(chat_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback —É –∫–ª–∏–µ–Ω—Ç–∞
    answer_callback(cid)

    if data == "yes_share":
        code_data = user.get("pending_code")
        if not code_data:
            send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        code, author_name, author_username = code_data
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        text = (f"–¢–≤–æ–π –∫–æ–¥: <b>{code}</b>\n\n"
                f"üë§ –ö–æ–¥–æ–º –ø–æ–¥–µ–ª–∏–ª—Å—è: {author_name} ({author_username})\n\n"
                "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:\n1. –°–º–µ–Ω–∏ —Ä–µ–≥–∏–æ–Ω App Store –Ω–∞ –°–®–ê: https://t-j.ru/apple-region/\n"
                "2. –°–∫–∞—á–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://apps.apple.com/us/app/sora-by-openai/id6744034028\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–æ–∂–µ –Ω–∞–∂–º–∏.")
        ik = {
            "inline_keyboard": [
                [{"text": "‚úÖ –°–ø–∞—Å–∏–±–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç!", "callback_data": "ok"}, {"text": "‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", "callback_data": "bad"}]
            ]
        }
        send_message(chat_id, text, reply_markup=ik)
        return

    if data == "no_share":
        send_message(chat_id, "üòî –•–æ—Ä–æ—à–æ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–¥–µ–ª–∏—à—å—Å—è!")
        user["pending_code"] = None
        return

    if data == "ok":
        user["pending_code"] = None
        user["shared"] += 0  # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
        send_message(chat_id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —Ä–∞–¥ —á—Ç–æ –ø–æ–º–æ–≥–ª–æ!")
        return

    if data == "bad":
        code_data = user.get("pending_code")
        if code_data:
            # —É–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –æ–Ω –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª—Å—è)
            shared_codes[:] = [c for c in shared_codes if c != code_data]
            user["pending_code"] = None
            send_message(chat_id, "üö´ –ö–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω.")
        else:
            send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

def main():
    offset = None
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        resp = get_updates(offset, timeout=30)
        if not resp.get("ok"):
            time.sleep(1)
            continue
        for upd in resp.get("result", []):
            offset = upd["update_id"] + 1
            if "message" in upd:
                handle_message(upd["message"])
            elif "callback_query" in upd:
                handle_callback(upd["callback_query"])
        time.sleep(0.5)

if __name__ == "__main__":
    main()
